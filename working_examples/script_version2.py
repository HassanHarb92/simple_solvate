import os
import subprocess
import numpy as np

def read_xyz(filename):
    """
    Reads an XYZ file, ensuring correct format and validating atomic coordinates.
    Dynamically determines the correct atom count.
    """
    with open(filename, 'r') as f:
        lines = [line.strip() for line in f ] #if line.strip()]  # Remove blank lines

    if len(lines) < 3:
        raise ValueError(f"[ERROR] '{filename}' does not contain enough lines to be a valid XYZ file.")

    try:
        declared_atom_count = int(lines[0])  # First line should be an integer
    except ValueError:
        raise ValueError(f"[ERROR] First line of '{filename}' must be an integer (number of atoms).")

    # Count actual atomic lines by filtering out invalid entries
    actual_atom_count = sum(1 for line in lines[2:] if len(line.split()) == 4)  # Ensure 'Element X Y Z' format

    if declared_atom_count != actual_atom_count:
        print(f"[WARNING] Atom count mismatch in '{filename}': Declared={declared_atom_count}, Found={actual_atom_count}. Using {actual_atom_count}.")

    xyz_data = []
    for i, line in enumerate(lines[2:2 + actual_atom_count], start=1):
        parts = line.split()
        if len(parts) != 4:
            raise ValueError(f"[ERROR] Invalid line format in '{filename}' at line {i+2}: '{line}'. Ensure it follows 'Element X Y Z'.")
        
        atom_label = parts[0]
        try:
            x, y, z = map(float, parts[1:4])
        except ValueError:
            raise ValueError(f"[ERROR] Invalid numeric values in '{filename}' at line {i+2}: '{line}'")
        
        xyz_data.append((atom_label, (x, y, z)))
    
    return xyz_data

def write_xyz(filename, xyz_data):
    """
    Writes a list of (atom_label, (x, y, z)) to an XYZ file.
    """
    with open(filename, 'w') as f:
        f.write(f"{len(xyz_data)}\n")
        f.write("Generated by Python script\n")
        for (atom_label, (x, y, z)) in xyz_data:
            f.write(f"{atom_label}  {x:.6f}  {y:.6f}  {z:.6f}\n")

def create_frozen_input(frozen_count):
    """
    Creates an xTB input file that correctly freezes the first 'frozen_count' atoms.
    Uses a format that xTB correctly recognizes.
    """
    with open("freeze.inp", "w") as f:
        f.write("$fix\n")
        f.write("  atoms: ")
        f.write(" ".join(str(i) for i in range(1, frozen_count + 1)))  # Ensure 1-based index
        f.write("\n$end\n")
    print(f"[INFO] Created freeze.inp (freezing atoms 1 to {frozen_count})")

def run_xtb_opt_frozen(xyz_file, charge=0, solvent="water"):
    """
    Runs xTB geometry optimization with frozen main molecule and user-defined solvent.
    """
    cmd = [
        "xtb",
        xyz_file,
        "--opt", "tight",
        "--gfn2",
        "--alpb", solvent,
        "--input", "freeze.inp",
        "--chrg", str(charge)
    ]
    print(f"[INFO] Running xTB with solvent '{solvent}'...")
    completed_process = subprocess.run(cmd, capture_output=True, text=True)
    
    if completed_process.returncode != 0:
        print("[ERROR] xTB optimization failed:")
        print(completed_process.stderr)
    else:
        print("[INFO] xTB optimization completed successfully!")
        if os.path.exists("xtbopt.xyz"):
            os.rename("xtbopt.xyz", "combined_optimized.xyz")
            print("[INFO] Renamed 'xtbopt.xyz' to 'combined_optimized.xyz'")

def main():
    main_xyz = input("Enter the main molecule (frozen) XYZ file: ")
    ion_xyz = input("Enter the counter ion XYZ file: ")
    main_coords = read_xyz(main_xyz)
    ion_coords = read_xyz(ion_xyz)

    solvent = input("Enter solvent model for xTB (default = 'water'): ").strip()
    if not solvent:
        solvent = "water"

    combined_coords = main_coords + ion_coords

    combined_filename = "combined.xyz"
    write_xyz(combined_filename, combined_coords)
    print(f"[INFO] Wrote combined system to '{combined_filename}'")

    frozen_count = len(main_coords)
    create_frozen_input(frozen_count)

    total_charge = int(input("Enter total net charge for the combined system [0]: ") or "0")

    run_xtb_opt_frozen(combined_filename, charge=total_charge, solvent=solvent)

    print("[INFO] Done. Check 'combined_optimized.xyz' for the final structure.")

if __name__ == "__main__":
    main()

